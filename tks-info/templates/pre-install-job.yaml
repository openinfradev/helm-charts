apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "tks-info.fullname" . }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "tks-info.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      name: {{ include "tks-info.fullname" . }}
    spec:
      restartPolicy: Never
      containers:
      - name: pre-install-job
        image: "bitnami/postgresql:11.12.0-debian-10-r44"
        env:
        - name: DB_ADMIN_USER
          value: {{ .Values.db.adminUser }}
        - name: PGPASSWORD
          value: {{ .Values.db.adminPassword }}
        - name: DB_NAME
          value: {{ .Values.db.dbName }}
        - name: DB_USER
          value: {{ .Values.args.dbUser }}
        - name: DB_PASSWORD
          value: {{ .Values.args.dbPassword }}
        - name: DB_URL
          value: {{ .Values.args.dbUrl }}
        - name: DB_PORT
          value: "{{ .Values.args.dbPort }}"
        command:
        - /bin/bash
        - -c
        - -x
        - |
          # check if ${DB_NAME} database already exists.
          psql -h ${DB_URL} -p ${DB_PORT} -U ${DB_ADMIN_USER} -lqt | cut -d \| -f 1 | grep -qw ${DB_NAME}
          if [[ $? -ne 0 ]]; then
            psql -h ${DB_URL} -p ${DB_PORT} -U ${DB_ADMIN_USER} -c "CREATE DATABASE ${DB_NAME};"
          fi

          # check if ${DB_USER} user already exists.
          psql -h ${DB_URL} -p ${DB_PORT} -U ${DB_ADMIN_USER} -tc '\du' | cut -d \| -f 1 | grep -qw ${DB_USER}
          if [[ $? -ne 0 ]]; then
            psql -h ${DB_URL} -p ${DB_PORT} -U ${DB_ADMIN_USER} -c "create user ${DB_USER} SUPERUSER password '${DB_PASSWORD}';"
          fi

          # check if contracts table in tks database already exists.
          psql -h ${DB_URL} -p ${DB_PORT} -U ${DB_ADMIN_USER} -d ${DB_NAME} -tc '\dt' | cut -d \| -f 2 | grep -qw csp_infos
          if [[ $? -ne 0 ]]; then
            echo """
              \c ${DB_NAME};
              CREATE TABLE csp_infos
              (
                  id uuid primary key,
                  contract_id uuid,
                  name character varying(50) COLLATE pg_catalog."default",
                  auth character varying(200) COLLATE pg_catalog."default",
                  csp_type integer,
                  updated_at timestamp with time zone,
                  created_at timestamp with time zone
              );
              INSERT INTO csp_infos ( id, contract_id, name, auth, csp_type, updated_at, created_at) 
                VALUES ('c947d800-ac43-4bab-a8e1-4ceaa0ffec98', 'f84df193-f6c8-45ad-867c-c0bcc48f09e5', 'default', '', 1, now(), now() );

              CREATE TABLE clusters
              (
                  name character varying(50) COLLATE pg_catalog."default",
                  id uuid primary key,
                  contract_id uuid,
                  csp_id uuid,
                  status integer,
                  master_flavor character varying(50) COLLATE pg_catalog."default",
                  master_replicas integer,
                  master_root_size bigint,
                  worker_flavor character varying(50) COLLATE pg_catalog."default",
                  worker_replicas integer,
                  worker_root_size bigint,
                  k8s_version character varying(50) COLLATE pg_catalog."default",
                  kubeconfig character varying(1000) COLLATE pg_catalog."default",
                  region character varying(50) COLLATE pg_catalog."default",
                  updated_at timestamp with time zone,
                  created_at timestamp with time zone
              );
              CREATE TABLE application_groups
              (
                  name character varying(50) COLLATE pg_catalog."default",
                  id uuid primary key,
                  type bigint,
                  subtype bigint,
                  status bigint,
                  cluster_id uuid,
                  external_label character varying(50) COLLATE pg_catalog."default",
                  updated_at timestamp with time zone,
                  created_at timestamp with time zone
              );
              CREATE TABLE applications
              (
                  id uuid primary key,
                  type bigint,
                  app_group_id uuid,
                  endpoint character varying(200) COLLATE pg_catalog."default",
                  metadata json,
                  updated_at timestamp with time zone,
                  created_at timestamp with time zone
              );
              CREATE TABLE keycloak_infos
              (
                  id uuid primary key,
                  cluster_id uuid,
                  realm character varying(100) COLLATE pg_catalog."default",
                  client_id character varying(100) COLLATE pg_catalog."default",
                  secret character varying(1000) COLLATE pg_catalog."default",
                  private_key character varying(1000) COLLATE pg_catalog."default",
                  updated_at timestamp with time zone,
                  created_at timestamp with time zone,
                  CONSTRAINT keycloak_infos_ukey UNIQUE (cluster_id, realm, secret)
              );
              
            """ | psql -h ${DB_URL} -p ${DB_PORT} -U ${DB_ADMIN_USER}
          fi